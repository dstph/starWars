{"version":3,"sources":["atomic/molecules/SearchField/SearchField.module.scss","atomic/organisms/Modal/Modal.module.scss","atomic/molecules/LanguageSwitcher/LanguageSwitcher.module.scss","atomic/atoms/FilmCard/FilmCard.module.scss","atomic/atoms/LoadingSpinner/LoadingSpinner.module.css","atomic/organisms/FilmsWrapper/FilmsWrapper.module.scss","stores/functions.js","stores/MainStore.js","atomic/molecules/LanguageSwitcher/LanguageSwitcher.js","atomic/atoms/FilmCard/FilmCard.js","atomic/atoms/LoadingSpinner/LoadingSpinner.js","atomic/atoms/Button/Button.js","atomic/atoms/People/People.js","atomic/atoms/Starships/Starships.js","atomic/atoms/Vehicles/Vehicles.js","atomic/atoms/Species/Species.js","atomic/atoms/Planets/Planets.js","atomic/molecules/SearchField/SearchField.js","atomic/organisms/FilmsWrapper/FilmsWrapper.js","atomic/organisms/Modal/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","regularArrSort","arr","sort","a","b","textA","toUpperCase","textB","fetchAll","Promise","all","map","url","fetch","then","r","json","d","name","results","myFetch","category","input","data","GlobalStore","language","films","loading","choosenLang","languages","code","translation","showModal","modalFilm","modalCharecters","modalStarships","modalPlanets","modalVehicles","modalSpecies","searchInput","searchChoice","dataFromSearch","setShowModal","setModalCharecters","setModalStarships","setModalPlanets","setModalVehicles","setModalSpecies","showModalHandler","element","setModalFilm","characters","starships","planets","vehicles","species","search","fetchSearch","setDataFromSearch","alert","makeObservable","this","observable","setLanguage","action","setLoading","setChoosenLang","setFilms","fetchFilms","setSearchInput","setSearchChoice","value","e","target","response","title","catch","error","console","log","finally","LanguageSwitcher","observer","className","styles","language_switcher","onChange","id","FilmCard","onClick","release_date","film_card","LoadingSpinner","loader","Button","child","People","options","skin_color","eye_color","hair_color","gender","height","Starships","model","cargo_capacity","Vehicles","length","Species","average_height","Planets","climate","population","search_field","type","for","currentTarget","size","option","useEffect","grid","index","episode_id","modal","modal_content","director","el","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70531637.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search_field\":\"SearchField_search_field__2jAgd\",\"option\":\"SearchField_option__zdlnZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1FFGY\",\"modal_content\":\"Modal_modal_content__2j8TL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"language_switcher\":\"LanguageSwitcher_language_switcher__3tvQc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"film_card\":\"FilmCard_film_card__1JuCS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"LoadingSpinner_loader__13fl6\",\"load4\":\"LoadingSpinner_load4__1AOc9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"FilmsWrapper_grid__1EC9k\"};","export function arrSort (arr)  {\r\n  arr.sort(function(a, b) {\r\n  var textA = a.title.toUpperCase();\r\n  var textB = b.title.toUpperCase();\r\n  return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n  })\r\n  return arr\r\n}\r\nexport function regularArrSort (arr)  {\r\n  arr.sort(function(a, b) {\r\n  var textA = a.toUpperCase();\r\n  var textB = b.toUpperCase();\r\n  return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n  })\r\n  return arr\r\n}\r\n\r\nexport async function fetchAll(arr) {\r\n  const results = await Promise.all(arr.map((url) => fetch(url).then((r) => r.json()).then(d=>d.name)));\r\n  return results\r\n}\r\n\r\nexport function fetchSearch(category, input){\r\n  switch(category){\r\n    case 'people':\r\n    return myFetch('people', input)\r\n    break;\r\n    case 'starships':\r\n    return myFetch('starships', input)\r\n    break;\r\n    case 'vehicles':\r\n    return myFetch('vehicles', input)\r\n    break;\r\n    case 'species':\r\n    return myFetch('species', input)\r\n    break;\r\n    case 'planets':\r\n    return myFetch('planets', input)\r\n    break;  \r\n  }\r\n}\r\n function myFetch(category, input){\r\n  return fetch(`https://swapi.dev/api/${category}?search=${input}/`)\r\n  .then(data=>data.json())\r\n}\r\n\r\n","import { observable, makeObservable, action } from 'mobx';\r\nimport { arrSort, regularArrSort, fetchAll, fetchSearch } from './functions';\r\n\r\nclass MainStore {\r\n  language = 'en';\r\n  films = '';\r\n  loading = true;\r\n  choosenLang = 'Language:';\r\n  languages = [\r\n    { code: 'en', name: 'English'},\r\n    { code: 'woo', name: 'Wookiee'},\r\n  ];\r\n  translation = {\r\n    'en': 'Language:',\r\n    'woo': 'Raaaaaahhgh uuh:',\r\n  };\r\n  showModal = false;\r\n  modalFilm = '';\r\n  modalCharecters = '';\r\n  modalStarships = '';\r\n  modalPlanets = '';\r\n  modalVehicles = '';\r\n  modalSpecies = '';\r\n  searchInput = '';\r\n  searchChoice = '';\r\n  dataFromSearch = '';  \r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      language: observable,\r\n      setLanguage: action,\r\n      loading: observable,\r\n      setLoading: action,\r\n      choosenLang: observable,\r\n      setChoosenLang: action,\r\n      films: observable,\r\n      setFilms: action,\r\n      fetchFilms: action,\r\n      showModal: observable,\r\n      setShowModal: action,\r\n      modalFilm: observable,\r\n      setModalFilm: action,\r\n      modalCharecters: observable,\r\n      setModalCharecters: action,\r\n      modalStarships: observable,\r\n      setModalStarships: action,\r\n      modalPlanets: observable,\r\n      setModalPlanets: action,\r\n      modalVehicles: observable,\r\n      setModalVehicles: action,\r\n      modalSpecies: observable,\r\n      setModalSpecies: action,\r\n      searchInput: observable,\r\n      setSearchInput: action,\r\n      searchChoice: observable,\r\n      setSearchChoice: action,\r\n      search: action,\r\n      dataFromSearch: observable,\r\n      setDataFromSearch: action,\r\n\r\n    })\r\n  }\r\n  setDataFromSearch(value){\r\n    this.dataFromSearch = value;\r\n  }\r\n  setSearchChoice(value){\r\n    this.searchChoice = value;\r\n  }\r\n  setSearchInput(value){\r\n    this.searchInput = value;\r\n  }\r\n  setModalSpecies(value){\r\n    this.modalVehicles = value\r\n  }\r\n  setModalVehicles(value){\r\n    this.modalVehicles = value\r\n  }\r\n  setModalPlanets(value){\r\n    this.modalPlanets = value\r\n  }\r\n  setModalStarships(value){\r\n    this.modalStarships = value\r\n  }\r\n  setModalCharecters(value){\r\n    this.modalCharecters = value\r\n  }\r\n\r\n  setModalFilm(value){\r\n    this.modalFilm = value;\r\n  }\r\n  setShowModal=()=>{\r\n    this.showModal = !this.showModal;\r\n    this.setModalCharecters('')\r\n    this.setModalStarships('')\r\n    this.setModalPlanets('')\r\n    this.setModalVehicles('')\r\n    this.setModalSpecies('')\r\n  }\r\n  setLoading(){\r\n    this.loading = !this.loading;\r\n  }\r\n  setLanguage(e){\r\n    this.language = e.target.value;\r\n    this.setChoosenLang(this.translation[e.target.value]);\r\n  }\r\n  setChoosenLang(value){\r\n    this.choosenLang = value;\r\n  }\r\n  setFilms(value){\r\n    this.films=value;\r\n  }\r\n  fetchFilms(){\r\n    fetch(`https://swapi.dev/api/films/`)\r\n\t\t.then( response => response.json() )\r\n\t\t.then( data => this.setFilms( arrSort(data.results) ) )\r\n\t\t.catch( (error) => console.log(error) )\r\n    .finally( () => this.setLoading() )\r\n  }\r\n  \r\n  showModalHandler=(element)=>{\r\n    this.setShowModal();\r\n    this.setModalFilm(element);\r\n    fetchAll(element.characters)\r\n      .then(data => this.setModalCharecters(regularArrSort(data)));\r\n    fetchAll(element.starships)\r\n      .then(data => this.setModalStarships(regularArrSort(data)));\r\n      fetchAll(element.planets)\r\n      .then(data => this.setModalPlanets(regularArrSort(data)));\r\n      fetchAll(element.vehicles)\r\n      .then(data => this.setModalVehicles(regularArrSort(data)));\r\n      fetchAll(element.species)\r\n      .then(data => this.setModalSpecies(regularArrSort(data)));\r\n  }\r\n  search=()=>{\r\n    this.searchInput && this.searchChoice ? \r\n    fetchSearch(this.searchChoice,this.searchInput)\r\n      .then(data=>this.setDataFromSearch(data.results[0]))\r\n    : \r\n    alert('Please fill all fields ')\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\nconst GlobalStore = new MainStore();\r\n\r\nexport default GlobalStore;","import React from 'react'\r\nimport styles from './LanguageSwitcher.module.scss'\r\nimport GlobalStore from '../../../stores/MainStore';\r\nimport { observer } from 'mobx-react';\r\n\r\nconst LanguageSwitcher = observer(() => (\r\n  <div className={styles.language_switcher}>\r\n    <label>{GlobalStore.choosenLang}</label>\r\n    <select onChange={(e)=>{GlobalStore.setLanguage(e)}} id=\"language\" name=\"language\">\r\n      {GlobalStore.languages.map(language => (\r\n        <option key={language.code} value={language.code}>{language.name}</option>\r\n      ))}\r\n    </select>\r\n  </div>\r\n))\r\n\r\nexport default LanguageSwitcher;","import React from 'react'\r\nimport styles from './FilmCard.module.scss'\r\n\r\nconst FilmCard = ({onClick, element}) => {\r\n  const {title, release_date} = element\r\n  return(\r\n    <div onClick={()=>onClick(element)} className={styles.film_card}>\r\n      <h4>{title}</h4>\r\n      <h4>{release_date}</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FilmCard","import React from 'react'\r\nimport styles from './LoadingSpinner.module.css' \r\n\r\nconst LoadingSpinner = () => (\r\n  <div className={styles.loader}>Loading...</div>\r\n)\r\n\r\nexport default LoadingSpinner","import React from 'react'\r\n\r\nconst Button = ({onClick, child}) => (\r\n  <button onClick={onClick}>{child}</button>\r\n)\r\n\r\nexport default Button;","import React from 'react'\r\n\r\nconst People = ({options}) =>(\r\n  <>\r\n    <p>{options.name}</p>\r\n    <p>skin color: {options.skin_color}</p>\r\n    <p>eye color: {options.eye_color}</p>\r\n    <p>hair color: {options.hair_color}</p>\r\n    <p>gender: {options.gender}</p>\r\n    <p>height: {options.height}</p>\r\n  </>\r\n)\r\n\r\nexport default People","import React from 'react'\r\n\r\nconst Starships = ({options}) => (\r\n  <>\r\n    <p>{options.name}</p>\r\n    <p>model: {options.model}</p>\r\n    <p>Cargo capacity: {options.cargo_capacity}</p>\r\n  </>\r\n)\r\n\r\nexport default Starships","import React from 'react'\r\n\r\nconst Vehicles = ({options}) => (\r\n  <>\r\n    <p>{options.name}</p>\r\n    <p>model: {options.model}</p>\r\n    <p>length: {options.length}</p>\r\n  </>\r\n)\r\n\r\nexport default Vehicles;","import React from 'react'\r\n\r\nconst Species = ({options}) => (\r\n  <>\r\n    <p>{options.name}</p>\r\n    <p>average height: {options.average_height}</p>\r\n    <p>language: {options.language}</p>\r\n  </>\r\n)\r\n\r\nexport default Species;","import React from 'react'\r\n\r\nconst Planets = ({options}) => (\r\n  <>\r\n    <p>{options.name}</p>\r\n    <p>climate: {options.climate}</p>\r\n    <p>population: {options.population}</p>\r\n  </>\r\n)\r\n\r\nexport default Planets;","import React from 'react'\r\nimport styles from './SearchField.module.scss'\r\nimport {Button, People, Starships, Vehicles, Species, Planets} from '../../atoms'\r\nimport GlobalStore from '../../../stores/MainStore'\r\nimport { observer } from 'mobx-react'\r\n\r\nconst SearchField = () => (\r\n  <div className={styles.search_field}>\r\n    <div onChange={(e)=>GlobalStore.setSearchChoice(e.target.value)}>\r\n      <input type=\"radio\" id=\"searchChoice1\"\r\n      name=\"search\" value=\"people\" />\r\n      <label for=\"searchChoice1\">People</label>\r\n      <input type=\"radio\" id=\"searchChoice2\"\r\n      name=\"search\" value=\"starships\" />\r\n      <label for=\"searchChoice2\">Starships</label>\r\n      <input type=\"radio\" id=\"searchChoice3\"\r\n      name=\"search\" value=\"vehicles\" />\r\n      <label for=\"searchChoice3\">Vehicles</label>\r\n      <input type=\"radio\" id=\"searchChoice4\"\r\n      name=\"search\" value=\"species\" />\r\n      <label for=\"searchChoice4\">Species</label>\r\n      <input type=\"radio\" id=\"searchChoice5\"\r\n      name=\"search\" value=\"planets\" />\r\n      <label for=\"searchChoice5\">Planets</label>\r\n    </div>\r\n    <input onChange={(e)=>GlobalStore.setSearchInput(e.currentTarget.value)} type=\"text\" size=\"40\" />\r\n    <Button onClick={GlobalStore.search} child={GlobalStore.language === 'en' ? 'Search' : 'Uughghhhgh uughghhhgh'} />\r\n    {\r\n      GlobalStore.dataFromSearch &&\r\n      GlobalStore.searchChoice === 'people' ?\r\n      <div className={styles.option}><People options={GlobalStore.dataFromSearch} /></div>\r\n      : GlobalStore.searchChoice === 'starships' ?\r\n      (GlobalStore.dataFromSearch && <div className={styles.option}><Starships options={GlobalStore.dataFromSearch} /></div>)\r\n      : GlobalStore.searchChoice === 'vehicles' ?\r\n      (GlobalStore.dataFromSearch && <div className={styles.option}><Vehicles options={GlobalStore.dataFromSearch} /></div>)\r\n      : GlobalStore.searchChoice === 'species' ?\r\n      (GlobalStore.dataFromSearch && <div className={styles.option}><Species options={GlobalStore.dataFromSearch} /></div>)\r\n      :  GlobalStore.searchChoice === 'planets' ?\r\n      (GlobalStore.dataFromSearch && <div className={styles.option}><Planets options={GlobalStore.dataFromSearch} /></div>)\r\n      : ''\r\n    }\r\n  </div>\r\n)\r\n\r\nexport default observer(SearchField)","import React,{useEffect} from 'react'\r\nimport GlobalStore from '../../../stores/MainStore'\r\nimport {FilmCard, LoadingSpinner} from '../../atoms'\r\nimport styles from './FilmsWrapper.module.scss'\r\nimport { observer } from 'mobx-react'\r\n\r\nconst FilmsWrapper = () => {\r\n  useEffect( () => {\r\n    GlobalStore.fetchFilms()\r\n    \r\n  }, [])\r\n  return(\r\n    <>\r\n      {GlobalStore.loading ? <LoadingSpinner /> :\r\n        <div className={styles.grid}>\r\n          {\r\n            GlobalStore.films.map((element,index)=>(\r\n              <FilmCard onClick={GlobalStore.showModalHandler} key={element.episode_id} element={element}  />\r\n            ))\r\n          }\r\n        </div>\r\n      }\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default observer(FilmsWrapper)","import React from 'react'\r\nimport GlobalStore from '../../../stores/MainStore'\r\nimport { observer } from 'mobx-react'\r\nimport {Button, LoadingSpinner} from '../../atoms'\r\nimport styles from './Modal.module.scss'\r\n\r\nconst Modal = () => (\r\n  <div className={styles.modal}>\r\n    <div className={styles.modal_content}>\r\n      <Button onClick={GlobalStore.setShowModal} child='x' />\r\n      <h3>{GlobalStore.modalFilm.title}</h3>\r\n      <p>Directed by {GlobalStore.modalFilm.director}</p>\r\n      <h4>Characters in film:</h4>\r\n      {\r\n        GlobalStore.modalCharecters ? \r\n        GlobalStore.modalCharecters.map(el=>(\r\n          <p key={el}>{el}</p>\r\n        )) : <LoadingSpinner />\r\n      }\r\n      <h4>Planets in film:</h4>\r\n      {\r\n        GlobalStore.modalPlanets ? \r\n        GlobalStore.modalPlanets.map(el=>(\r\n          <p key={el}>{el}</p>\r\n        )) : <LoadingSpinner />\r\n      }\r\n      <h4>Starships in film:</h4>\r\n      {\r\n        GlobalStore.modalStarships ? \r\n        GlobalStore.modalStarships.map(el=>(\r\n          <p key={el}>{el}</p>\r\n        )) : <LoadingSpinner />\r\n      }\r\n      <h4>Vehicles in film:</h4>\r\n      {\r\n        GlobalStore.modalVehicles ? \r\n        GlobalStore.modalVehicles.map(el=>(\r\n          <p key={el}>{el}</p>\r\n        )) : <LoadingSpinner />\r\n      }\r\n      <h4>Species in film:</h4>\r\n      {\r\n        GlobalStore.modalVehicles ? \r\n        GlobalStore.modalVehicles.map(el=>(\r\n          <p key={el}>{el}</p>\r\n        )) : <LoadingSpinner />\r\n      }\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default observer(Modal)","import './App.css';\nimport {LanguageSwitcher, SearchField} from './atomic/molecules/'\nimport {FilmsWrapper, Modal} from './atomic/organisms'\nimport GlobalStore from './stores/MainStore'\nimport { observer } from 'mobx-react'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LanguageSwitcher />\n      <FilmsWrapper />\n      <SearchField />\n      {GlobalStore.showModal && <Modal />}\n    </div>\n  );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}